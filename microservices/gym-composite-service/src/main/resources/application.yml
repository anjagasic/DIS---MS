api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Anja Gasic
      url: https://github.com/anjagasic
      email: gasica7@gmail.com

  gym-composite:
    get-composite-gym:
      description: Returns a composite view of the specified gym id
      notes: |
        # Normal response
        If the requested gym id is found the method will return information regarding:
        1. Base gym information
        1. Client
        1. Employees
        1. Programs
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)
        ## Gym id 113
        200 - Ok
        ## Non numerical gym id
        400 - A <b>Bad Request</b> error will be returned
        ## Gym id 13
        404 - A <b>Not Found</b> error will be returned
        ## Negative gym ids
        422 - An <b>Unprocessable Entity</b> error will be returned

create-composite-gym:
  description: Creates a composite gym
  notes: |
    # Normal response
    The composite gym information posted to the API will be splitted up and stored as separate gym-info, client, employee and program entities.
    # Expected error responses
    1. If a gym with the same gymId as specified in the posted information already exists,
       an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
  delete-composite-gym:
    description: Deletes a gym composite
    notes: |
      # Normal response
      Entities for gym information, clients, employees and programs related to the specificed gymId will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non existing gymId will return <b>200 Ok</b>.

server.port: 7000
server.error.include-message: always

app:
  gym-service:
    host: localhost
    port: 7001
  client-service:
    host: localhost
    port: 7002
  employee-service:
    host: localhost
    port: 7003
  program-service:
    host: localhost
    port: 7004

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-gyms:
      destination: gyms
      producer:
        required-groups: auditGroup
    output-clients:
      destination: clients
      producer:
        required-groups: auditGroup
    output-employees:
      destination: employees
      producer:
        required-groups: auditGroup
    output-programs:
      destination: programs
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
  level:
    root: INFO
    microservices: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

---
spring.profiles: docker

server.port: 8081

app:
  gym-service:
    host: localhost
    port: 8081
  client-service:
    host: localhost
    port: 8081
  employee-service:
    host: localhost
    port: 8081
  program-service:
    host: localhost
    port: 8081

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka
